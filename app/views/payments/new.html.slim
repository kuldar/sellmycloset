- if current_user.has_payment_info?
  = form_tag payments_path, method: 'post'
  input type='submit' value='Pay with current CC'

- else
  = form_tag payments_path, method: 'post', data: { behavior: 'transaction-form' }
    #error-message
    
    label for='card-number' Card number
    #card-number

    label for='cvv' CVV
    #cvv

    label for='expiration-date' Exp date
    #expiration-date

    input type='hidden' name='payment_method_nonce'
    input type='submit' value='Pay' disabled=true data-behavior='transaction-submit'

  script#braintree-client-token type="application/json"
    = @braintree_client_token

- unless current_user.has_payment_info?
  javascript:
    var form = document.querySelector('[data-behavior="transaction-form"]');
    var submit = document.querySelector('[data-behavior="transaction-submit"]');
    var clientToken = document.getElementById('braintree-client-token').innerHTML;
    var nonce = document.querySelector('[name="payment_method_nonce"]')

    braintree.client.create({
      authorization: clientToken
    }, function (clientErr, clientInstance) {
      if (clientErr) {
        console.error(clientErr);
        return;
      }

      braintree.hostedFields.create({
        client: clientInstance,
        vault: true,
        styles: {
          'input': {
            'font-size': '16px'
          },
          'input.invalid': {
            'color': 'red'
          },
          'input.valid': {
            'color': 'green'
          }
        },
        fields: {
          number: {
            selector: '#card-number',
            placeholder: '4111 1111 1111 1111'
          },
          cvv: {
            selector: '#cvv',
            placeholder: '123'
          },
          expirationDate: {
            selector: '#expiration-date',
            placeholder: '10 / 2019'
          }
        }
      }, function (hostedFieldsErr, hostedFieldsInstance) {
        if (hostedFieldsErr) {
          console.error(hostedFieldsErr);
          return;
        }

        submit.removeAttribute('disabled');

        form.addEventListener('submit', function (event) {
          event.preventDefault();

          hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {
            if (tokenizeErr) {
              console.error(tokenizeErr);
              return;
            }

            // If this was a real integration, this is where you would
            // send the nonce to your server.
            console.log('Got a nonce: ' + payload.nonce);
            nonce.value = payload.nonce;
            form.submit();
          });
        }, false);
      });
    });