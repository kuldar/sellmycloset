.main
  .card.is-small
    .card-section
      .transaction-product-image-container
        = link_to @product.user, class: 'transaction-product-seller' do
          = image_tag @product.user.avatar_url(:thumb), class: 'transaction-product-seller-photo'
          .transaction-product-seller-name = @product.user.name

        .transaction-product-image style="background-image:url('#{ @product.product_images.first.image_url(:medium) if @product.product_images.any? }')"
      
    .card-section.is-padded    
      .transaction-product-body
        .transaction-product-info
          .transaction-product-title = @product.title
          .transaction-product-description = emojify(@product.description)

        .transaction-product-cost
          .transaction-product-price = humanized_money_with_symbol(@product.price)
          .transaction-shipping-price + €#{@product.shipping_price} #{ t('.shipping') }



    .card-section.is-gray.is-padded
      = form_for product_transaction_path, url: { action: 'show' }, method: 'post', data: { behavior: 'payment-form' } do |f|

          .form-group
            select.form-select data-select="#{@product.id}" id="shipping_target" name="shipping_target"
              option
              option value="1" Mustamäe pakiautomaat
              option value="2" Laagri pakiautomaat
              option value="3" Viru Keskuse pakiautomaat

          - if current_user.has_payment_info?
            = f.hidden_field :buyer_id, value: current_user.id
            = f.hidden_field :seller_id, value: @product.user.id
            .clearfix
              button.transaction-form-submit-btn.pull-left type='submit'
                | <strong>#{ t('.pay') }</strong> <span class='price'>#{ number_to_currency @product.total_price }</span>
              = link_to t('.change_card'), '#', class: 'form-link pull-right'

          - else
            .transaction-form-card
              #error-message
              
              .transaction-form-section
                label.transaction-form-label for='card-number' = t('.card_number')
                #card-number.transaction-form-input

              .transaction-form-section
                label.transaction-form-label for='cvv' = t('.cvv')
                #cvv.transaction-form-input

              .transaction-form-section
                label.transaction-form-label for='expiration-date' = t('.exp_date')
                #expiration-date.transaction-form-input
              
            = f.hidden_field :buyer_id, value: current_user.id
            = f.hidden_field :seller_id, value: @product.user.id
            input type='hidden' name='payment_method_nonce'
            button.transaction-form-submit-btn type='submit' disabled=true data-behavior='payment-submit'
              | <strong>#{ t('.pay') }</strong> <span class="price">#{ number_to_currency(@product.total_price) }<span class="price">

javascript:
  $(document).ready(function () {
    $('[data-select="#{@product.id}"]').select2({
      placeholder: "#{ t('.choose_shipping') }"
    });
  });
  
- unless current_user.has_payment_info?
  script#braintree-client-token type="application/json"
    = @braintree_client_token

  javascript:
    var form = document.querySelector('[data-behavior="payment-form"]');
    var submit = document.querySelector('[data-behavior="payment-submit"]');
    var clientToken = document.getElementById('braintree-client-token').innerHTML;
    var nonce = document.querySelector('[name="payment_method_nonce"]')

    braintree.client.create({
      authorization: clientToken
    }, function (clientErr, clientInstance) {
      if (clientErr) {
        console.error(clientErr);
        return;
      }

      braintree.hostedFields.create({
        client: clientInstance,
        vault: true,
        styles: {
          'input': {
            'font-family': 'Proxima Nova',
            'font-size': '16px'
          },
          'input.invalid': {
            'color': '#eb410d'
          }
        },
        fields: {
          number: {
            selector: '#card-number',
            placeholder: '4111 1111 1111 1111'
          },
          cvv: {
            selector: '#cvv',
            placeholder: '123'
          },
          expirationDate: {
            selector: '#expiration-date',
            placeholder: '10 / 2019'
          }
        }
      }, function (hostedFieldsErr, hostedFieldsInstance) {
        if (hostedFieldsErr) {
          console.error(hostedFieldsErr);
          return;
        }

        submit.removeAttribute('disabled');

        form.addEventListener('submit', function (event) {
          event.preventDefault();

          hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {
            if (tokenizeErr) {
              console.error(tokenizeErr);
              return;
            }
            
            console.log('Got a nonce: ' + payload.nonce);
            nonce.value = payload.nonce;
            form.submit();
          });
        }, false);
      });
    });